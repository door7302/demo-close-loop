version: "3.8"

services:
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    restart: always
    user: root
    environment:
      - INFLUXDB_DB=demo
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    ports:
      - "8086:8086"
    volumes:
      - /var/log:/var/log
      - /opt/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
      - /opt/influxdb/data:/var/lib/influxdb

  telegraf:
    build: https://github.com/door7302/jts_telegraf.git#v1.0.16
    image: jts_telegraf:latest
    container_name: jts_telegraf
    restart: always
    user: root
    depends_on:
      - influxdb
    volumes:
      - /var/log:/var/log
      - /opt/telegraf/:/etc/telegraf/
      - /opt/telegraf/metadata:/var/metadata
      - /opt/telegraf/cert:/var/cert
    command:
      --config-directory /etc/telegraf/telegraf.d

  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    restart: always
    user: root
    depends_on:
      - influxdb
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/home.json
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=yesoreyeram-boomtable-panel, agenty-flowcharting-panel
    volumes:
      - /opt/grafana/grafana.ini:/etc/grafana/grafana.ini
      - /opt/grafana/cert:/tmp
      - /opt/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - /opt/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - /opt/grafana/data:/var/lib/grafana
      - /opt/grafana/plugins:/var/lib/grafana/plugins

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    restart: always
    user: root
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: EXTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://10.83.153.137:9092
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "d33bd245-a018-40a3-91b1-b82cf89d9e1c"
    volumes:
      - /opt/kafka/data:/var/lib/kafka/data

  # StackStorm services
  st2web:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2web:${ST2_VERSION:-latest}
    restart: on-failure
    user: root
    depends_on:
      - st2auth
      - st2api
      - st2stream
    environment:
      ST2_AUTH_URL: ${ST2_AUTH_URL:-http://st2auth:9100/}
      ST2_API_URL: ${ST2_API_URL:-http://st2api:9101/}
      ST2_STREAM_URL: ${ST2_STREAM_URL:-http://st2stream:9102/}
      ST2WEB_HTTPS: ${ST2WEB_HTTPS:-0}
    ports:
      - "${ST2_EXPOSE_HTTP:-127.0.0.1:80}:80"
    networks:
      - private
      - public
    healthcheck:
      test: ["CMD", "/st2web-healthcheck.sh"]
      interval: 30s
      timeout: 1s
      retries: 1
    volumes:
      - /opt/stackstorm/scripts/st2web-healthcheck.sh:/st2web-healthcheck.sh

  st2makesecrets:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2actionrunner:${ST2_VERSION:-latest}
    restart: on-failure
    user: root
    networks:
      - private
    volumes:
      - /opt/stackstorm/scripts/makesecrets.sh:/makesecrets.sh
      - /opt/stackstorm/keys:/etc/st2/keys:rw
    command: /makesecrets.sh

  st2api:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2api:${ST2_VERSION:-latest}
    restart: on-failure
    user: root
    depends_on:
      - mongo
      - rabbitmq
      - redis
      - st2makesecrets
    networks:
      - private
    environment:
      ST2_AUTH_URL: http://st2auth:9100/
      ST2_API_URL: http://st2api:9101/
      ST2_STREAM_URL: http://st2stream:9102/
    volumes:
      - /opt/stackstorm/files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - /opt/stackstorm/files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - /opt/stackstorm/keys:/etc/st2/keys:ro
      - /opt/stackstorm/configs:/opt/stackstorm/configs:rw
      - /opt/stackstorm/packs:/opt/stackstorm/packs:rw
      - /opt/stackstorm/files/rbac:/opt/stackstorm/rbac:rw
      - /opt/stackstorm/packs.dev:/opt/stackstorm/packs.dev:rw

  st2sensorcontainer:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2sensorcontainer:${ST2_VERSION:-latest}
    restart: on-failure
    user: root
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - /opt/stackstorm/files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - /opt/stackstorm/files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - /opt/stackstorm/virtualenvs:/opt/stackstorm/virtualenvs:ro
      - /opt/stackstorm/packs:/opt/stackstorm/packs:ro
      - /opt/stackstorm/configs:/opt/stackstorm/configs:ro
      - /opt/stackstorm/packs.dev:/opt/stackstorm/packs.dev:ro

  mongo:
    image: mongo:4.4
    restart: on-failure
    user: root
    networks:
      - private
    volumes:
      - /opt/mongo/data:/data/db

  rabbitmq:
    image: rabbitmq:3.12
    restart: on-failure
    user: root
    networks:
      - private
    volumes:
      - /opt/rabbitmq/data:/var/lib/rabbitmq

  redis:
    image: redis:7.2
    restart: on-failure
    user: root
    networks:
      - private
    volumes:
      - /opt/redis/data:/data

networks:
  public:
    driver: bridge
  private:
    driver: bridge